# -*- coding: utf-8 -*-
"""Random_Forest_Maxwell_code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_m-frwIMKbskiLbth5N8IpFTzDbh5qwQ
"""

#Based on the Pack Price of each country Nigeria, South Africa, Cote d'Ivoire, Haiti, Uganda has been chosen

pip install scikit-learn==1.3.1

import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import numpy as np
from sklearn.model_selection import train_test_split
import copy
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt
from sklearn.model_selection import RandomizedSearchCV,GridSearchCV
from scipy.stats import randint
import joblib
from sklearn.feature_selection import SelectKBest, chi2, RFE
from sklearn.pipeline import Pipeline
from sklearn.model_selection import  cross_val_score
import pickle

from google.colab import drive
drive.mount('/content/drive')

df=pd.read_csv("/content/drive/MyDrive/Maxwell Project/newdf.csv")

df

list1=df['Country'].unique()

list1

#country_list=["CÃ´te d'Ivoire",'Nigeria','South Africa','Haiti','Uganda']

#df=df[df['Country'].isin(country_list)]

df

for x in df.columns:
  print(x,df[x].isnull().sum())

y=df['Line Item Insurance (USD)'].unique()

y[0]

row_index = df.index[df['Line Item Insurance (USD)'].isnull()==True].tolist()

row_index

for x in row_index:
  df.drop(index=x,inplace=True)

df.columns

df2=df[['Country','Shipment Mode','Weight (Kilograms)','Freight Cost (USD)']]

for x in df2.columns:
  print(x,df2[x].dtype)

rowlist=df2.index[df2['Shipment Mode'].isna()==True].tolist()

rowlist

for x in rowlist:
  df2.drop(index=x,inplace=True)

for x in df2['Country']:
  df2.replace(x,x.lower(),inplace=True)

for x in df2['Shipment Mode']:
  df2.replace(x,x.lower(),inplace=True)

for x in df2['Weight (Kilograms)']:
  df2.replace(x,float(x),inplace=True)

for x in df2['Freight Cost (USD)']:
  df2.replace(x,float(x),inplace=True)

df2

min(df2['Freight Cost (USD)'])

max(df2['Freight Cost (USD)'])

max(df2['Weight (Kilograms)'])

min(df2['Weight (Kilograms)'])

df2['Weight (Kilograms)'].unique()

df2['Country'].unique()

df2['Shipment Mode'].unique()

dummies=pd.get_dummies(df2[['Country','Shipment Mode']])

dummies

df3=pd.concat([df2,dummies],axis=1)

df3.drop(columns=['Country','Shipment Mode'],inplace=True)

df3

min(df3['Weight (Kilograms)'])

max(df3['Weight (Kilograms)'])

scaler = MinMaxScaler()

data=df3['Freight Cost (USD)']

data=data.to_numpy()

data.shape

reshapedata=np.reshape(data,(2195,-1))

scaler.fit(reshapedata)

newdata=scaler.transform(reshapedata)

newdatareshape=np.reshape(newdata,((2195)))

df3['Freight Cost (USD)']=newdatareshape

data=df3['Weight (Kilograms)']

data=data.to_numpy()

data.shape

reshapedata=np.reshape(data,(2195,-1))

scaler.fit(reshapedata)

newdata=scaler.transform(reshapedata)

newdatareshape=np.reshape(newdata,(2195))

df3['Weight (Kilograms)']=newdatareshape

df3

df3.columns

df3.columns

y=df3[['Freight Cost (USD)']]

df4=copy.deepcopy(df3)

df4.drop(columns=['Freight Cost (USD)'],inplace=True)

X=df4

X_train, X_test, y_train, y_test = train_test_split(
X, y, test_size=0.2, random_state=42)

param_dist = {
    'n_estimators': randint(100, 500),
    'max_depth': [None, 10, 20, 30, 40],
    'min_samples_split': randint(2, 11),
    'min_samples_leaf': randint(1, 5),
    'max_features': ['auto', 'sqrt', 'log2']
}

# Initialize the RandomForestRegressor
rf = RandomForestRegressor(random_state=42)

# Initialize the RandomizedSearchCV
random_search = RandomizedSearchCV(estimator=rf, param_distributions=param_dist, n_iter=100, cv=5, n_jobs=-1, verbose=2, random_state=42, scoring='neg_mean_squared_error')

# Fit the RandomizedSearchCV to the data
random_search.fit(X_train, y_train)

# Get the best parameters
best_params = random_search.best_params_
print(f"Best parameters: {best_params}")

#rf_regressor=RandomForestRegressor(max_depth= 20, max_features= 'sqrt', min_samples_leaf= 1, min_samples_split= 5, n_estimators= 149)

rf_regressor=RandomForestRegressor(max_depth= 20, max_features= 'sqrt',
                                  min_samples_leaf= 1, min_samples_split= 5, n_estimators= 149,bootstrap=True)

rf_regressor.fit(X_train, y_train)


y_pred_test = rf_regressor.predict(X_test)


y_pred_train = rf_regressor.predict(X_train)


mse_test = mean_squared_error(y_test, y_pred_test)
mae_test = mean_absolute_error(y_test, y_pred_test)
r2_test = r2_score(y_test, y_pred_test)


mse_train = mean_squared_error(y_train, y_pred_train)
mae_train = mean_absolute_error(y_train, y_pred_train)
r2_train = r2_score(y_train, y_pred_train)

print("Test Data:")
print(f'Mean Squared Error: {mse_test}')
print(f'Mean Absolute Error: {mae_test}')
print(f'R-squared Score: {r2_test}')

print("\nTraining Data:")
print(f'Mean Squared Error: {mse_train}')
print(f'Mean Absolute Error: {mae_train}')
print(f'R-squared Score: {r2_train}')

import joblib

#joblib.dump(rf_regressor,'rf_regressor.pkl')

X_test

df2.head(685)